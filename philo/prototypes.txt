// exec.c
int	gets_forks(t_philo *ph);
int	eats(t_philo *ph);
int	sleeps(t_philo *ph);
int	is_dead(t_philo *ph);
void	*philosophers(void *philo);

// free.c
void	ft_puterror(int flag);
int	free_args(t_args *args, int flag);
int handle_death(t_args *args, t_philo *ph);
void	handle_thread_error(t_args *args, t_philo *ph, int flag);

// init.c
void	init_args_stack(t_args *args, int ac, char **av);
int	init_args_heap(t_args *args);
int	init_philo(t_args *args, t_philo *philo, int i);
int	exec_threads(t_args *args, t_philo *philos);

// main.c
int	main(int ac, char **av);

// utils.c
void	ft_putstr_fd(char *s, int fd);
void	ft_putnbr_fd(int nb, int fd);
void	*ft_calloc(size_t count, size_t size);
unsigned int	ft_atoi_ph(const char *str);
int	ft_utdiff(struct timeval *t1, struct timeval *t2);



./prototypes srcs/exec.c 